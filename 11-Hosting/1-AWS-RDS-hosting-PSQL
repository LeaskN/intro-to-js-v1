IT MIGHT BE GOOD TO GO OVER DATABASES IN AWS RIGHT BEFORE
DEPLOYMENT - Module 8 -> databases

DO THIS ON YOUR PERSONAL AWS ACCOUNTS
ERRORS MAY COST STUDENTS UP TO $1.00/month

Check PSQL is working:
	- psql -U postgres
	- Launch app, (react front end & express backend) and if the data shows then you're good to go
		- Npm start or yarn start from WITHIN the front end directory
		- Node index.js from within the backend directory
Create DB on AWS:
AWS Console > RDS 
Click Create Database
Settings: 

Chose a database:
	Standard
Engine options:
	PSQL
	Version 12.5-R1
	Students will need to choose the version with free trial 
Templates:
	Free tier
Settings:
	Change the identifier (music)
	Set the username & password (I recommend 'postgres')
DB instance class:
	Burstable, micro
Storage:
	General Purpose (SSD)
	Allocated storage: 20 GiB
	Enable Auto-scaling 
	Max storage 1000 GiB
Availability & duration:
	Do not create a standby instance
Connectivity:
	VPC: Default
	Subnet group: default
	Public Access - Yes
	Create new VPC Security Group
		(mimic AllowAll) Call it AllowAllV3 
		Availability zone no preference
		Port = 5432
Database authentication:
		Password authentication
Additional Configuration:
		Students should not need to uncheck any boxes
		As an instructor, if you are running into errors, check off the boxes in additional configuration until the errors go away 
		Turn off encryption, performance insights & enable enhanced monitoring
		
Estimated monthly costs:
	Student estimated should be 'free tier eligible' unless they created an AWS account 1+ year prior to the bootcamp
	Instructor estimated should be less than $20 ($15.44)

Click on Create database!!

CREATE SECURITY GROUP

Click into DB identifier -> click on the VPC security group -> click on the security group id
or
SEARCH 'Security' in the services bar, select 'EC2 Security'

	Rules:
		Inbound:
			Type: All TCP
			Source: Anywhere
		Outbound
			Type: All traffic
			Destination: Anywhere
			
COPY YOUR EXISTING LOCAL DB:

		- copy your DB:  
			§ Create a new directory
			§ In your new directory, run the following command to save your local postgres db setup: 
				PGPASSWORD=<password> pg_dump -f <file name> -U <postgres user> --no-owner <db name>
			 		--> documentation for pg_dump command -> https://www.postgresql.org/docs/12/app-pgdump.html

		- Connect to your new RDS
			§ Once the status is available click into the instance & grab the endpoint

		- Edit and run the following line to connect (edit the bold with your endpoint)
			§ psql -h database-1.cnuypb0q01wm.us-east-1.rds.amazonaws.com -p 5432 -U postgres
			§ Enter the password you wrote when creating the DB

		- Create new database with the same as the old db name ('music')
			§ CREATE DATABASE music;
			§ \c music
			§ Copy your file path, 
				□ windows users remove quotes and swap backslashes with forward slashes
					® "C:\Users\Nic\Downloads\dump.sql"
					® C:/Users/Nic/Downloads/dump.sql
				□ Mac:
					® Right click > get info > highlight where > right click > copy
					® Add actual file name to end (dump.sql)
			§ \i ‘PATH’ 

		- Reconnect to the database by running (omitting the db name)
			§  \c 

		- Run \dt to view the new contents
		
inside of WORKING app go to queries.js and change the host (and password if it differs from your local to your RDS instance):
  user: 'postgres',
  host: 'database-1.cnuypb0q01wm.us-east-1.rds.amazonaws.com',
  database: 'node',
  password: 'password',
  port: 5432,


Test your application:
On host: localhost and on host: endpoint

Ex: Add an instance of songs while on the AWS RDS server and switch back to localhost to show that the new instance is on AWS and not localhost 
